-- 今月の収入と支出の合計額を知りたい
SELECT SUM(入金額),SUM(出金額) FROM 家計簿

-- 今月の食費を支払った回数を知りたい
SELECT COUNT(費目) AS 食費を支払った回数 FROM 家計簿
  WHERE 費目 = '食費'

-- 先月までの水道光熱費で、もっとも高かった額と低かった額を知りたい
SELECT MAX(出金額) AS 最高額, MIN(出金額) AS 最低額
  FROM 家計簿 WHERE 費目 = '水道光熱費'

-- 先月までの給料の平均を知りたい
SELECT AVG(入金額) AS 平均額 FROM 家計簿
  WHERE 費目 = '給料'

-- 先月までの費目ごとの出費額を知りたい
SELECT 費目, SUM(出金額) AS 出金額 FROM 家計簿アーカイブ
  GROUP BY 費目

-- 先月までの費目ごとの出費額を知りたい今月の出費のうち、平均が5,000円以上の費目とその最大額を知りたい
SELECT 費目, MAX(出金額) AS 最大出金額 FROM 家計簿
  WHERE 出金額 > 0
 GROUP BY 費目
 HAVING AVG(出金額) >= 5000

SELECT 費目,
       SUM(出金額) AS 合計額,
       COUNT(出金額) AS 回数
  FROM 家計簿
 WHERE 出金額 > 0
 GROUP BY 費目
 HAVING COUNT(出金額) >= 5
    AND 費目 IN ('食費','居住費') --データ絞り込み条件
/*
SQL文をよく見ると、最後のAND出指定している費目の名称による絞り込みは、集計結果ではなく
家計簿テーブルの各行に対する条件なので、WHRER句に書いても同じ結果になる
HAVING句ではなくWHERE句にこの条件を記述して絞り込むタイミングを早めればDBMSが集計やグループ化を
行う行数が減るためパフォーマンスは向上する
集計の前に処理行数を減らせる場合は、WHERE句で早めに絞り込むことを進める
*/

-- 6-1
-- 1.
SELECT SUM(降水量), AVG(最高気温), AVG(最低気温)
  FROM 都市別気象観測テーブル;

-- 2.
SELECT SUM(降水量), AVG(最高気温), AVG(最低気温)
  FROM 都市別気象観測テーブル
 WHERE 都市名 = '東京';

-- 3.
SELECT 都市名, AVG(降水量), MIN(最高気温), MAX(最低気温)
  FROM 都市別気象観測テーブル
 GROUP BY 都市名;

-- 4.
SELECT 月, AVG(降水量), AVG(最高気温), AVG(最低気温)
  FROM 都市別気象テーブル
 GROUP BY 月;

-- 5.
SELECT 都市名, MAX(最高気温)
  FROM 都市別気象観測テーブル
 GROUP BY 都市名
 HAVING MAX(最高気温) >= 38;

-- 6.
SELECT 都市名, MIN(最低気温)
  FROM 都市別気象観測テーブル
 GROUP BY 都市名
 HAVING MIN(最低気温) <= -10;

-- 6-2
-- 1.
SELECT COUNT(*) AS 社員数
  FROM 入退室管理テーブル
 WHERE 退出 IS NULL;

-- 2.
SELECT 社員名, COUNT(*) AS 入室回数
  FROM 入退室管理テーブル
 GROUP BY 社員名
 ORDER BY 2 DESC;

-- 3.
SELECT CASE 事由区分 WHEN '1' THEN 'メンテナンス'
                     WHEN '2' THEN 'リリース作業'
                     WHEN '3' THEN '障害対応'
                     WHEN '9' THEN 'その他'
       END AS 事由,
       COUNT(*) AS 入室回数
   FROM 入退室管理テーブル
  GROUP BY 事由区分;

-- 4.
SELECT 社員名, COUNT(*) AS 入室回数
  FROM 入退室管理テーブル
 GROUP BY 社員名
 HAVING COUNT(*) > 10;

-- 5.
SELECT 事由区分, COUNT(社員名) AS 対応社員数
  FROM 入退室管理テーブル
 WHERE 事由区分 = '3'
 GROUP BY 日付;

 /* COUNT関数は、引数の指定によって動作が変わります。

 COUNT(*)とした場合は、「行数」をカウントします。NULLも含めて集計します。
 COUNT(列名)とした場合は、「値の数」をカウントします。NULLは無視して集計します。
この違いを理解した上で、要件に合わせたSQL文を作成します。

1. 現在入室中の社員数なので、「退出」列がNULLの行に絞り込んで行数をカウントします。
2. 「社員名」列でグループ化し、社員ごとの行数をカウントします。ORDER BY句に列番号「2」を
指定していますが、「入室回数(列の別名)」を指定してもよいです(問題6-1解説参照)。
3. 「自由区分」列でグループ化し、区分ごとの行数をカウントします。CASEを使用して、
区分の番号に対応する事由を表示します。
4．「社員名」列でグループ化し、社員ごとの行数をカウントします。集計した行数が
10を超える行に絞り込むため、HAVING句に条件式を記述します。
5. 障害対応のみを対象に集計するため、WHERE句で先に行を絞り込みます。その後、
「日付」列でグループ化し、日付ごとの行数をカウントします。
 */

-- 6-3
-- 1. SELECT COUNT(*) FROM 販売履歴
-- 2. SELECT 商品名, COUNT(*) FROM 販売履歴
-- 3. SELECT COUNT(*) FROM 販売履歴 GROUP BY 商品名
-- 4. SELECT 商品名, COUNT(*) FROM 販売履歴 GROUP BY 商品名
-- 5. SELECT 商品区分, 商品名, COUNT(*) FROM 販売履歴 GROUP BY 商品名
-- 6. SELECT 商品区分, 商品名, COUNT(*) FROM 販売履歴
--    GROUP BY 商品区分, 商品名
--    HAVING AVG(価格) >= 10000
 /* 【解説】関連記述箇所 p178
2. 列ごとの結果の行数が異なるので(結果表がデコボコになる)、エラーになります。エラーを回避するには、
   SELECT句の「商品名」列を削除するか、「GROUP BY 商品名」を追加します。

5. 2と同様、エラーになります。エラーを回避するには、SELECT句の「商品区分」列を削除するか、
   GROUP BY句に「商品区分」列を追加します。

上記修正案は、本来欲しい情報の形とは異なる可能性があります。実際には、どのような情報が必要なのか、十分調査した上で対応します。
 */