SELECT コード,地域,都道府県名,県庁所在地,面積 FROM 都道府県;
SELECT * FROM 都道府県;
SELECT 地域 AS area, 都道府県名 AS pref FROM 都道府県;

INSERT INTO 都道府県('コード','地域','都道府県名','面積')
    VALUES ('26','近畿','京都',4613);

INSERT INTO 都道府県('コード','地域','都道府県名','県庁所在地','面積')
    VALUES ('37','四国','香川','高松',1876);

INSERT INTO 都道府県('コード','都道府県名','県庁所在地')
    VALUES ('40','福岡','福岡');


UPDATE 都道府県 SET 県庁所在地 = '京都'
    WHERE コード = '26';

UPDATE 都道府県 SET 地域 = '九州', 面積 = 4976
    WHERE コード = '40';

DELETE FROM 都道府県 WHERE コード = '26';

-- 3.6.2
/*3月１日に支払った食費の内容を知りたい*/
SELECT * FROM 家計簿
    WHERE 日付 = '2024-03-01' AND 費目 = '食費'

/*支出に関係のない行を取り出したい*/
SELECT * FROM 家計簿
    WHERE 出金額 IS NULL

/*メモに「購入」を含む支払いを調べたい*/
SELECT * FROM 家計簿
    WHERE メモ LIKE '%購入%' AND 出金額 > 0

/*住居費(家賃、電気代、水道代)の支払いを調べたい*/
SELECT * FROM 家計簿
    WHERE 費目 IN ('家賃','電気代','水道代')

/*3月の行だけを取り出したい*/
SELECT * FROM 家計簿
    WHERE 日付 BETWEEN '2024-03-01' AND '2024-03-31'

-- 3-1
-- 1. 6月のデータ
SELECT * FROM 気象観測
    WHERE 月 = 6;

-- 2. 6月以外のデータ
SELECT * FROM 気象観測
    WHERE 月 <> 6;

-- 3. 降水量が100未満のデータ
SELECT * FROM 気象観測
    WHERE 降水量 < 100;

-- 4. 降水量が200より多いデータ
SELECT * FROM 気象観測
    WHERE 降水量 > 200;

-- 5. 最高気温が30以上のデータ
SELECT * FROM 気象観測
    WHERE 最高気温 >= 30;

-- 6. 最低気温が0以下のデータ
SELECT * FROM 気象観測  
WHERE 最低気温 <= 0;

-- 7. 3月、5月、7月のデータ(INを使う場合)
SELECT * FROM 気象観測
    WHERE 月 IN(3,5,7);

-- 7. 3月、5月、7月のデータ(ORを使う場合)
SELECT * FROM 気象観測
    WHERE 月 = 3 OR 月 = 5 OR 月 = 7;

-- 8. 3月、5月、7月以外のデータ(NOT INを使う場合)
SELECT * FROM 気象観測
    WHERE 月 NOT IN(3,5,7);

-- 8. 3月、5月、7月以外のデータ(ANDを使う場合)
SELECT * FROM 気象観測
    WHERE 月 <> 3 AND 月 <> 5 AND 月 = 7;

-- 9. 降水量が100以下で、湿度が50より低いデータ
SELECT * FROM 気象観測
    WHERE 降水量 <= 100 AND 湿度 < 50;

-- 10. 最低気温が5未満か、最高気温が35より高いデータ
SELECT * FROM 気象観測
    WHERE 最低気温 < 5 OR 最高気温 > 35;

-- 11. 湿度が60～79の範囲にあるデータ(BETWEENを使う場合)
SELECT * FROM 気象観測
    WHERE 湿度 BETWEEN 60 AND 79;

-- 11. 湿度が60～79の範囲にあるデータ(ANDを使う場合)
SELECT * FROM 気象観測
    WHERE 湿度 >= 60 AND 湿度 <= 79;

-- 12. 観測データのない列のある月のデータ
SELECT * FROM 気象観測
    WHERE 月 IS NULL  OR 最高気温 IS NULL
        OR 最低気温 IS NULL OR 湿度 IS NULL;

-- 3-2
-- 1. 都道府県が「川」で終わる都道府県名
SELECT * FROM 都道府県
    WHERE 都道府県 LIKE '%川';

-- 2. 都道府県名に「島」が含まれる都道府県名
SELECT * FROM 都道府県
    WHERE 都道府県名 LIKE '%島%';

-- 3. 都道府県名が「愛」で始まる都道府県名
SELECT * FROM 都道府県
    WHERE 都道府県名 LIKE '愛%';

-- 4. 都道府県名と県庁所在地が一致するデータ
SELECT * FROM 都道府県
    WHERE 都道府県名 = 県庁所在地;

-- 5. 都道府県名と県庁所在地が一致しないデータ
SELECT * FROM 都道府県
    WHERE 都道府県名 <> 県庁所在地

-- 3-3
-- 1. 登録されている全データを取得して、テーブルの内容を確認する
SELECT * FROM 成績表;

-- 2. 次の表にある学生の成績データを追加する
-- 学籍番号S001の学生
INSERT INTO 成績表
    VALUES ('S001','織田　信長','77','55','80','75','93','NULL');
-- 学籍番号A002の学生
INSERT INTO 成績表
    VALUES ('A002','豊臣　秀吉','64','69','70','0','59','NULL');
-- 学籍番号E003の学生
INSERT INTO 成績表
    VALUES ('E003','徳川　家康','80','83','85','90','79','NULL');

-- 3. 学籍番号S001の学生の法学を85、哲学を67に修正する
UPDATE 成績表
    SET 法学 = 85, 哲学 = 67
 WHERE 学籍番号 = 'S001';

-- 4. 学籍番号A002の学生と学籍番号E003の学生の外国語を81に修正する
UPDATE 成績表
    SET 外国語 = 81
  WHERE 学籍番号 IN('A002','E003');

-- 5. 次のルールで総合成績を更新する(4つのルールごとにSQL文を作成する)
-- 5.1 全科目が80以上の学生は「A」とする
UPDATE 成績表
    SET 総合成績 = 'A'
 WHERE 法学 >= 80 AND 経済学 >= 80 AND 哲学 >= 80 AND 情報理論 >= 80 AND 外国語 >= 80;

-- 5.2 法学と外国語のどちらかが80以上、かつ経済学と哲学のどちらかが80以上の学生は「B」とする
UPDATE 成績表
    SET 総合成績 = 'B'
　WHERE (法学 >= 80 OR 外国語 >=80) AND (経済学 >= 80 OR 哲学 >= 80)
    AND 総合成績 IS NULL;

-- 5.3 全科目が50未満の学生は「D」とする
UPDATE 成績表
    SET  総合成績 = 'D'
  WHERE 法学 > 50 AND 経済学 > 50 AND 哲学 > 50 AND 情報理論 > 50 AND 外国語 > 50 
  AND 総合成績 IS NULL

-- 5.4 それ以外の学生を「C」とする
UPDATE 成績表
    SET 総合成績 = 'C'
  WHERE 総合成績 IS NULL;

-- 6. いずれかの科目に0がある学生を、成績表テーブルから削除する
DELETE FROM 成績表
    WHERE 法学 = 0
       OR 経済学 = 0
       OR 哲学 = 0
       OR 情報論理 = 0
       OR 外国語 = 0;

-- 3-4（主キーにふさわしい列名）
-- 1. 気象観測テーブル 月
-- 2. 都道府県テーブル コード
-- 3. 成績表テーブル 学籍番号

-- 取得行数を限定する別の方法
SELECT 費目,出金額 FROM 家計簿
    ORDER BY 出金額 DESC LIMIT 3

SELECT K.費目,K.出金額 
  FROM (
    SELECT *,
        ROW_NUMBER() OVER (ORDER BY 出金額 DESC) RN
        FROM 家計簿
  )K
  WHERE K.RN >= 1 AND K.RN <= 3


SELECT 費目,出金額
  FROM (
    SELECT K.*, ROWNUM AS RN
    FROM (
      SELECT * FROM 家計簿
      ORDER BY 出金額 DESC
    )K
  )
  WHERE RN >= 1 AND RN <= 3

SELECT TOP(3) 費目,出金額
    FROM 家計簿 ORDER BY 出金額 DESC

-- これまでに使った費目一覧を、重複を除外して作りたい
SELECT DISTINCT 費目 FROM 家計簿

-- 3月に使った金額を大きい順に取り出したい
SELECT * FROM 家計簿
  WHERE 日付 >= '2024-03-01'
    AND 日付 <= '2024-03-31'
  ORDER BY 出金額 DESC

-- これまでの給料を大きい順に5件だけ取り出したい
SELECT * FROM 家計簿アーカイブ
  WHERE 費目 = '給料' ORDER BY 入金額 DESC
OFFSET 0 ROWS
  FETCH NEXT 5 ROWS ONLY

-- 家計簿と、アーカイブにある2月のデータをまとめて日付順に取り出したい
SELECT * FROM 家計簿
  UNION
SELECT * FROM 家計簿アーカイブ
 WHERE 日付 >= '2024-02-01'
   AND 日付<= '2024-02-28'
ORDER BY 1

-- 今月初めて発生した費目を知りたい
SELECT 費目 FROM 家計簿
    EXCEPT
SELECT 費目 FROM 家計簿アーカイブ

-- 4-7
-- 1. 注文順かつその明細順に、すべての注文データを取得する
SELECT * FROM 注文履歴
  ORDER BY 注文番号,注文枝番;

-- 2. 2024年1月に注文のあった商品名の一覧を商品名順に取得する
SELECT DISTINCT 商品名 FROM 注文履歴
  WHERE 日付 >= '2024-01-01' 
    AND 日付 <= '2024-01-31'
 ORDER BY 商品名

-- 3. ドリンクの商品について、注文番号、注文枝番、注文金額を取得する。
--  ただし注文金額の低い方から2～4番目に該当する注文だけを対象とする
SELECT 注文番号,注文枝番,注文金額 FROM 注文履歴
  WHERE 分類 = '1' ORDER BY 注文金額
  OFFSET 1 ROW FETCH NEXT 3 ROWS ONLY;
-- 4. その他の商品について、2つ以上同時に購入された商品を取得し、日付、
--   商品名、単価、数量、注文金額を購入日順に表示する。ただし、同日に
--   売り上げたものは、数量の多い順に表示する
SELECT 日付,商品名,単価,数量,注文金額 FROM 注文履歴
  WHERE 分類 = '3' AND 数量 >= 2 
  ORDER BY 日付,数量 DESC;

-- 5. 商品の分類ごとに、分類、商品名、サイズ、単価を1つの表として取得する
--   また、サイズはドリンクの商品についてのみ表示し、分類と商品名順に並べること
SELECT DISTINCT 分類,商品名,サイズ,単価
  FROM 注文履歴 WHERE 分類 = "1"
  UNION
SELECT DISTINCT 分類,商品名,NULL,単価
  FROM 注文履歴 WHERE 分類 = "2"
  UNION
SELECT DISTINCT 分類,商品名,NULL,単価
  FROM 注文履歴 WHERE 分類 = '3'
  ORDER BY 1,2;

  -- 4-2
  -- 1. 和集合の結果、整数テーブルと等しくなる
SELECT 値 FROM 奇数 UNION SELECT 値 FROM 偶数;
/*
奇数テーブルの検索結果と、偶数テーブルの検索結果をすべて足し合わせることで、
整数の情報が得られます。2つの検索結果の和集合を取得するには、UNION演算子を使用します。
*/

  -- 2. 差集合の結果、奇数テーブルと等しくなる
SELECT 値 FROM 整数 EXCEPT SELECT 値 FROM 偶数
/*
整数テーブルの検索結果から、偶数テーブルの検索結果と重複する行を取り除くことで、
奇数の情報が得られます。2つの検索結果の差集合を取得するには、
EXCEPT演算子を使用します。
*/

  -- 3. 積集合の結果、偶数テーブルと等しくなる
SELECT 値 FROM 整数 INTERSECT SELECT 値 FROM 偶数;
/*
整数テーブルの検索結果と偶数テーブルの検索結果から、
重複する行を取得することで、偶数の情報が得られます。
2つの検索結果の積集合を取得するには、INTERSECT演算子を使用します。
*/

  -- 4. 検索結果なし
SELECT 値 FROM 奇数 INTERSECT SELECT 値 FROM 偶数；
/*
奇数テーブルの検索結果と偶数テーブルの検索結果には、重複する行がありません。
INTERSECTによる積集合の演算結果は、なしになしになります。
*/

-- 5.8.2
-- 家計簿で入金額の差額も表示したい
SELECT 日付,費目,メモ,入金額,出金額,
       入金額 - 出金額 AS 入出金差額
  FROM 家計簿

-- 8文字以上のメモは、「・・・」で末尾を省略したい
SELECT 日付,費目,
  CASE WHEN LENGTH(メモ) >= 8 THEN SUBSTRING(メモ,1,8) || '…'
       ELSE メモ
    END AS メモ,入金額,出金額
  FROM 家計簿

-- 「1ドル=140円」と仮定して、入出金をドルで表示(小数点以下切り捨て)したい
SELECT 日付, TRUNC(入金額/140.0,0) AS 入金ドル,
       TRUNC(出金額/140.0,0) AS 出金ドル
  FROM 家計簿

-- 間違って未来の日付で登録されている行を探したい
SELECT * FROM 家計簿 WHERE 日付 > CURRNT_DATE

-- 家計簿のメモを表示したい。メモが未登録の行では代わりに費目を、費目も未登録の場合は'不明'と表示したい
SELECT 日付,COALESCE(メモ,費目,'不明') AS 備考 FROM 家計簿


-- 5-1
-- 1. 現在登録されているデータをもとに(A)~(C)に当てはまる得点をそれぞれ受験IDごとに計算して登録
UPDATE 試験結果
  SET 午後1 = (80 * 4) - (86 + 68 + 91)
 WHERE 受験者ID = 'SW1046';

UPDATE 試験結果
  SET 論述 = (68 * 4) - (65 + 53 + 70)
 WHERE 受験ID = 'SW1350';

UPDATE 試験結果
  SET 午前 = (56 * 4) - (59 + 56 + 36)
 WHERE 受験ID = 'SW1877';

-- 2. この試験に合格するには次の条件をすべて満たす必要がある
-- (1) 午前の点数は60以上であること
-- (2) 午前1と午後2を合計した点数が120以上であること
-- (3) 論述の点数が、午前・午後1・午後2の合計点の3割以上であることこれらの条件をもとに、合格者の受験IDを抽出する。
--      ただし、列見出しは「合格者ID」とすること
SELECT 受験ID AS 合格ID
  FROM 試験結果
 WHERE 午前 >= 60
   AND 午前1 + 午後2 >= 120
   AND 0.3 * (午前 +午後1 + 午後2) <= 論述;


-- 5-2
-- 1. メールアドレスの最後の2文字が国コードであることを利用して、国名を登録したい
--    国コードを日本語の国名に変換の上、国名列を更新する。ただし、1つのSQL文で全行を更新すること
UPDATE 回答者
    SET 国名 = CASE SUBSTRING(TPIM(メールアドレス),
                              LENBTH(TRIM(メールアドレス))-1, 2)
              WHEN 'jp' THEN '日本'
              WHEN 'uk' THEN 'イギリス'
              WHEN 'cn' THEN '中国'
              WHEN 'vn' THEN 'ベトナム' END;

-- 2. メールアドレスと住居、年齢を一覧表示する。ただし、次の条件を満たした形で表示すること
-- (1) メールアドレスの余分な空白は除去する
-- (2) 住居と年齢は1つの項目とし、見出しを「属性」とする。住居は「D」が戸建て、「C」が集合住宅を表している
--      ただし、20～50代のみ考慮すればよい
SELECT TRIM(メールアドレス) AS メールアドレス,
       CASE WHEN 年齢 >= 20 AND 年齢 < 30 THEN '20代'
            WHEN 年齢 >= 30 AND 年齢 < 40 THEN '30代'
            WHEN 年齢 >= 40 AND 年齢 < 50 THEN '40代'
            WHEN 年齢 >= 50 AND 年齢 < 60 THEN '50代' END
       || ':' ||
       CASE 住居 WHEN 'D' THEN '戸建て'
                 WHEN 'C' THEN '集合住宅' END AS 属性
  FROM 回答者;

-- 5-3
-- 1. 依頼された文字は、何文字の刺繡が必要かを求める。「文字」列のデータをもとに、1つのSQL文で「文字数」列の全行を更新する
--    ただし、「文字」列には半角の空白が入る可能性があるが、余白は文字数に含めない。なお、使用するDBMSでは、文字列長を得る
--    関数はバイト数でなく文字数を返すものとする
UPDATE 受注
  SET 文字数 = LENGTH(REPLACE(文字,' ',''));

-- 2. 受注内容を一覧表示する。一覧には、受注日、受注ID、文字数、書体名、単価、特別加工料を載せ、受注日及び受注ID順に表示したい
--    ただし、特別加工料がかからないものについては、特別加工料をゼロにする
SELECT 受注日,受注ID,文字数,
      CASE COALESCE(書体コード, '1')
          WHEN '1' THEN 'ブロック体'
          WHEN '2' THEN '筆記体'
          WHEN '3' THEN '草書体' END AS 書体名,
      CASE COALESCE(書体コード, '1')
          WHEN '1' THEN 100
          WHEN '2' THEN 150
          WHEN '3' THEN 200 END AS 単価,
      CASE WHEN 文字数 > 10 THEN 500
          ELSE 0 END AS 特別加工料
  FROM 受注 ORDER BY 受注日,受注ID;

-- 3. 受注IDが113の注文に対して、文字の一部を変更したいという依頼があった。
--    登録されている文字を次の依頼内容に更新する。依頼内容：半角スペースを「★」に変更
UPDATE 受注
  SET 文字 = PRPLACE(文字,' ', '★')
 WHERE 受注ID = '113';
